import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function convertSvgToPng() {
    const publicDir = path.join(__dirname, '../public');
    const srcDir = path.join(__dirname, '../src/assets'); // SVG –∏—Å—Ç–æ—á–Ω–∏–∫–∏

    const icons = [
        { input: 'icon-180.svg', output: 'icon-180.png', size: 180 },
        { input: 'icon-192.svg', output: 'icon-192.png', size: 192 },
        { input: 'icon-512.svg', output: 'icon-512.png', size: 512 }
    ];

    console.log('üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –∏–∫–æ–Ω–∫–∏ –≤ PNG...');

    for (const icon of icons) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ SVG –≤ src/assets, –∑–∞—Ç–µ–º –≤ public
        let inputPath = path.join(srcDir, icon.input);
        if (!fs.existsSync(inputPath)) {
            inputPath = path.join(publicDir, icon.input);
        }

        const outputPath = path.join(publicDir, icon.output);

        if (!fs.existsSync(inputPath)) {
            console.warn(`‚ö†Ô∏è  –§–∞–π–ª ${icon.input} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ src/assets, –Ω–∏ –≤ public`);
            continue;
        }

        try {
            await sharp(inputPath)
                .resize(icon.size, icon.size)
                .png({
                    quality: 90,
                    compressionLevel: 9,
                    progressive: true
                })
                .toFile(outputPath);

            console.log(`‚úÖ ${icon.input} ‚Üí ${icon.output} (${icon.size}x${icon.size})`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${icon.input}:`, error.message);
        }
    }

    // –°–æ–∑–¥–∞—ë–º favicon.ico –∏–∑ 192px –≤–µ—Ä—Å–∏–∏
    try {
        const faviconSizes = [16, 32, 48];
        const faviconPath = path.join(publicDir, 'favicon.ico');

        // –°–æ–∑–¥–∞—ë–º 32px PNG –¥–ª—è favicon
        const favicon32Path = path.join(publicDir, 'favicon-32.png');
        let iconSvgPath = path.join(srcDir, 'icon-192.svg');
        if (!fs.existsSync(iconSvgPath)) {
            iconSvgPath = path.join(publicDir, 'icon-192.svg');
        }

        await sharp(iconSvgPath)
            .resize(32, 32)
            .png()
            .toFile(favicon32Path);

        console.log('‚úÖ favicon-32.png —Å–æ–∑–¥–∞–Ω');

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å favicon.ico (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
        try {
            await sharp(favicon32Path)
                .resize(32, 32)
                .toFormat('png')
                .toFile(faviconPath.replace('.ico', '.png'));

            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .ico (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            fs.renameSync(faviconPath.replace('.ico', '.png'), faviconPath);
            console.log('‚úÖ favicon.ico —Å–æ–∑–¥–∞–Ω');
        } catch (icoError) {
            console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º PNG –∫–∞–∫ favicon');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è favicon:', error.message);
    }

    console.log('üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

convertSvgToPng().catch(console.error);