/**
 * Шаблоны для генерации Flutter пакетов
 * Используют плейсхолдеры вида {{variableName}} для замены значений
 */

// Константы для ссылок
export const FOXIC_WEBSITE = 'https://icons.plugfox.dev';
export const FOXIC_NAME = 'Foxic';

export const FLUTTER_TEMPLATES = {
  /**
   * Шаблон pubspec.yaml файла
   */
  pubspec: `name: {{packageName}}
description: {{description}}
version: {{version}}
homepage: {{homepage}}
repository: {{repository}}

environment:
  sdk: '{{sdkConstraint}}'
  flutter: '{{flutterConstraint}}'

dependencies:
  flutter:
    sdk: flutter

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^4.0.0

flutter:
  fonts:
    - family: {{fontName}}
      fonts:
        - asset: fonts/{{fontName}}.ttf
`,

  /**
   * Шаблон основного Dart файла с иконками
   */
  dartCode: `// ignore_for_file: constant_identifier_names

/// {{description}}
///
/// This library provides {{iconCount}} custom icons as [IconData] objects.
/// All icons are optimized for Flutter and use the {{fontName}} font family.
///
/// Generated by {{foxicName}} Icon Font Generator
/// {{foxicWebsite}}
library;

import 'package:flutter/widgets.dart' show IconData, staticIconProvider;

/// A static icon provider for the {{fontName}} icon font.
///
/// This class provides access to {{iconCount}} custom icons through static
/// [IconData] constants. Each icon is optimized for Flutter applications
/// and supports all standard [Icon] widget properties like size, color, etc.
///
/// ## Usage
///
/// \`\`\`dart
/// Icon({{className}}.{{firstIconName}})
///
/// // With custom styling
/// Icon(
///   {{className}}.{{firstIconName}},
///   size: 32.0,
///   color: Colors.blue,
/// )
/// \`\`\`
///
/// ## Font Details
///
/// - **Font Family**: {{fontName}}
/// - **Package**: {{packageName}}
/// - **Version**: {{version}}
/// - **Icons Count**: {{iconCount}}
/// - **Unicode Range**: U+{{minUnicode}} - U+{{maxUnicode}}
@staticIconProvider
abstract final class {{className}} {
  /// The package name where the font is located.
  ///
  /// This ensures proper font loading when the package is used as a dependency.
  static const String _package = '{{packageName}}';

  /// The font family name for the icon font.
  ///
  /// This corresponds to the font family defined in pubspec.yaml.
  static const String _family = '{{fontName}}';

{{iconEntries}}
}
`,

  /**
   * Шаблон для отдельной иконки в Dart коде
   */
  iconEntry: `
  /// Icon data for the "{{iconName}}" icon.
  ///
  /// Unicode: {{unicodeDisplay}}
  ///
  /// Example usage:
  /// \`\`\`dart
  /// Icon({{className}}.{{dartName}})
  /// \`\`\`
  static const IconData {{dartName}} = IconData(
    {{unicodeHex}},
    fontPackage: _package,
    fontFamily: _family,
  );`,

  /**
   * Шаблон README.md файла
   */
  readme: `# {{className}}

{{description}}

A Flutter package providing {{iconCount}} custom icons as an icon font.

## Installation

Add this package to your \`pubspec.yaml\`:

### From local path
\`\`\`yaml
dependencies:
  {{packageName}}:
    path: ./path/to/{{packageName}}
\`\`\`

### From pub.dev (if published)
\`\`\`yaml
dependencies:
  {{packageName}}: ^{{version}}
\`\`\`

## Usage

Import the package and use the icons:

\`\`\`dart
import 'package:{{packageName}}/{{packageName}}.dart';

// Use in your widgets
Icon({{className}}.{{firstIconName}})

// Or with custom styling
Icon(
  {{className}}.{{firstIconName}},
  size: 48.0,
  color: Colors.blue,
)
\`\`\`

## Available Icons

{{iconTable}}{{moreIconsNote}}

## Technical Details

- **Font Family**: {{fontName}}
- **Icons Count**: {{iconCount}}
- **Package Name**: {{packageName}}
- **Version**: {{version}}
- **Flutter**: {{flutterConstraint}}
- **Dart**: {{sdkConstraint}}

## Font Details

- **Font File**: \`fonts/{{fontName}}.ttf\`
- **Unicode Range**: U+{{minUnicode}} - U+{{maxUnicode}}
- **Font Format**: TrueType Font (TTF)

## Getting Started with Flutter Icons

Once you've added the package to your project:

1. Run \`flutter pub get\` to install the package
2. Import the package in your Dart file
3. Use the icons just like any other Flutter icons

### Example Widget

\`\`\`dart
class IconDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Icons Demo'),
        leading: Icon({{className}}.{{firstIconName}}),
      ),
      body: Center(
        child: Icon(
          {{className}}.{{firstIconName}},
          size: 64,
          color: Theme.of(context).primaryColor,
        ),
      ),
    );
  }
}
\`\`\`

## License

This package was generated using [{{foxicName}}]({{foxicWebsite}}) - Icon Font Generator.{{authorSection}}
`,

  /**
   * Секция автора для README (опциональная)
   */
  authorSection: `

## Author

{{author}}`,

  /**
   * Шаблон .gitignore файла для workspace
   */
  gitignore: `# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.
/pubspec.lock
**/doc/api/
.dart_tool/
build/
`,

  /**
   * Шаблон analysis_options.yaml для workspace
   */
  analysisOptions: `# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from \`package:lints\`.
# This set helps identify many issues that may lead to problems when running
# or consuming Dart code, and enforces writing Dart using a single, idiomatic
# style and format.
#
# If you want a smaller set of lints, you can change this to specify
# 'package:lints/core.yaml'. These are just the most critical lints
# (the recommended set includes the core lints).
# The core lints are also what is used by pub.dev for scoring packages.

include: package:lints/recommended.yaml

# Uncomment the following section to specify additional rules.

# linter:
#   rules:
#     - camel_case_types

# analyzer:
#   exclude:
#     - path/to/excluded/files/**

# For more information about the core and recommended set of lints, see:
# https://dart.dev/guides/language/analysis-options

# For additional information about configuring this file, see:
# https://dart.dev/guides/language/analysis-options
`,

  /**
   * Шаблон CHANGELOG.md для workspace
   */
  changelog: `## {{version}}

* Initial release with {{iconCount}} custom icons
* Generated by {{foxicName}} Icon Font Generator
* Supports Flutter {{flutterConstraint}}
* Compatible with Dart {{sdkConstraint}}

### Features

* TTF icon font with {{iconCount}} custom icons
* Type-safe icon constants with IntelliSense support
* Full Flutter integration with IconData
* Optimized for performance and small bundle size
* Compatible with all Flutter platforms

### Installation

Add to your pubspec.yaml:
\`\`\`yaml
dependencies:
  {{packageName}}:
    path: ./{{packageName}}
\`\`\`

### Usage

\`\`\`dart
import 'package:{{packageName}}/{{packageName}}.dart';

Icon({{className}}.{{firstIconName}})
\`\`\`
`,

  /**
   * Шаблон LICENSE файла для workspace
   */
  license: `MIT License

Copyright (c) {{year}} {{author}}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
`
};

/**
 * Функция для замены плейсхолдеров в шаблоне
 * Заменяет все вхождения {{variableName}} на соответствующие значения
 */
export function replaceTemplateVariables(
  template: string,
  variables: Record<string, string | number | boolean>
): string {
  let result = template;

  // Заменяем все плейсхолдеры
  Object.entries(variables).forEach(([key, value]) => {
    const placeholder = `{{${key}}}`;
    const stringValue = String(value);

    // Используем глобальную замену для всех вхождений
    result = result.split(placeholder).join(stringValue);
  });

  return result;
}

/**
 * Типы для переменных шаблонов Flutter
 */
export interface FlutterTemplateVariables {
  // Основные параметры пакета
  packageName: string;
  fontName: string;
  className: string;
  version: string;
  description: string;

  // Метаданные автора и репозитория
  author?: string;
  homepage?: string;
  repository?: string;
  year?: string;

  // Ограничения SDK
  sdkConstraint: string;
  flutterConstraint: string;

  // Информация об иконках
  iconCount: number;
  firstIconName: string;
  minUnicode: string;
  maxUnicode: string;

  // Сгенерированный контент
  iconEntries: string;
  iconTable: string;
  moreIconsNote: string;
  authorSection: string;
}