import { createSignal, Show } from 'solid-js';
import { ProjectInfo } from '../services/projects.service';

interface ProjectCardProps {
  projectId: string;
  project: ProjectInfo;
  onOpen: (projectId: string) => void;
  onDelete: (projectId: string) => void;
  onLeave?: (projectId: string) => void;
  onTogglePin?: (projectId: string) => void;
}

export default function ProjectCard(props: ProjectCardProps) {
  const [showDropdown, setShowDropdown] = createSignal(false);
  let dropdownRef: HTMLDivElement | undefined;

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–æ–ø–¥–∞—É–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
  const handleClickOutside = (event: MouseEvent) => {
    if (dropdownRef && !dropdownRef.contains(event.target as Node)) {
      setShowDropdown(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞
  const handleContextMenu = (event: MouseEvent) => {
    event.preventDefault();
    setShowDropdown(true);
    document.addEventListener('click', handleClickOutside, { once: true });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –¥—Ä–æ–ø–¥–∞—É–Ω
  const handleDropdownClick = (event: MouseEvent) => {
    event.preventDefault();
    setShowDropdown(!showDropdown());
    if (showDropdown()) {
      document.addEventListener('click', handleClickOutside, { once: true });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
  const handleCardClick = (event: MouseEvent) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –¥—Ä–æ–ø–¥–∞—É–Ω
    if ((event.target as HTMLElement).closest('.project-card-dropdown')) {
      return;
    }
    props.onOpen(props.projectId);
  };

  return (
    <div
      class="project-card"
      onClick={handleCardClick}
      onContextMenu={handleContextMenu}
    >
      <div class="project-card-header">
        <div class="project-card-title">
          <h3>{props.project.name}</h3>
          <Show when={props.project.pinned}>
            <span class="project-card-pin" title="–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ">üìå</span>
          </Show>
        </div>

        <div class="project-card-dropdown">
          <button
            class="project-card-menu-btn"
            onClick={handleDropdownClick}
            title="–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞"
          >
            ‚ãÆ
          </button>

          <Show when={showDropdown()}>
            <div ref={dropdownRef} class="project-card-menu">
              <Show when={props.onTogglePin}>
                <button
                  class="project-card-menu-item"
                  onClick={(e) => {
                    e.stopPropagation();
                    props.onTogglePin?.(props.projectId);
                    setShowDropdown(false);
                  }}
                >
                  {props.project.pinned ? 'üìå –û—Ç–∫—Ä–µ–ø–∏—Ç—å' : 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å'}
                </button>
              </Show>
              <Show
                when={props.project.role === 'owner'}
                fallback={
                  <Show when={props.onLeave}>
                    <button
                      class="project-card-menu-item project-card-menu-item--danger"
                      onClick={(e) => {
                        e.stopPropagation();
                        props.onLeave?.(props.projectId);
                        setShowDropdown(false);
                      }}
                    >
                      üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç
                    </button>
                  </Show>
                }
              >
                <button
                  class="project-card-menu-item project-card-menu-item--danger"
                  onClick={(e) => {
                    e.stopPropagation();
                    props.onDelete(props.projectId);
                    setShowDropdown(false);
                  }}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
              </Show>
            </div>
          </Show>
        </div>
      </div>

      <div class="project-card-content">
        <div class="project-card-role">
          <span class={`project-role project-role--${props.project.role}`}>
            {props.project.role === 'owner' ? '–í–ª–∞–¥–µ–ª–µ—Ü' :
             props.project.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' :
             props.project.role === 'editor' ? '–†–µ–¥–∞–∫—Ç–æ—Ä' : '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'}
          </span>
        </div>

        <div class="project-card-footer">
          <Show when={props.project.notifications > 0}>
            <span class="project-card-notifications">
              {props.project.notifications}
            </span>
          </Show>
        </div>
      </div>
    </div>
  );
}