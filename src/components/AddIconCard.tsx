import { createSignal, Show } from 'solid-js';
import { IconData, iconsService } from '../services/icons.service';

interface AddIconCardProps {
  onIconsAdd: (icons: IconData[]) => void;
  disabled?: boolean;
}

export default function AddIconCard(props: AddIconCardProps) {
  const [isDragOver, setIsDragOver] = createSignal(false);
  const [isProcessing, setIsProcessing] = createSignal(false);
  const [error, setError] = createSignal<string | null>(null);

  let fileInputRef: HTMLInputElement | undefined;

  const handleFileSelect = () => {
    if (props.disabled) return;
    fileInputRef?.click();
  };

  const handleFileChange = async (e: Event) => {
    const input = e.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) return;

    await processFiles(input.files);
    // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö –∂–µ —Ñ–∞–π–ª–æ–≤
    input.value = '';
  };

  const processFiles = async (files: FileList) => {
    if (props.disabled) return;

    setIsProcessing(true);
    setError(null);

    try {
      const icons = await iconsService.readSvgFiles(files);

      if (icons.length === 0) {
        setError('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö SVG —Ñ–∞–π–ª–æ–≤');
        return;
      }

      props.onIconsAdd(icons);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const successMessage = icons.length === 1
        ? `–î–æ–±–∞–≤–ª–µ–Ω–∞ 1 –∏–∫–æ–Ω–∫–∞`
        : `–î–æ–±–∞–≤–ª–µ–Ω–æ ${icons.length} –∏–∫–æ–Ω–æ–∫`;

      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast notification)
      console.log(successMessage);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDragOver = (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (props.disabled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã
    if (e.dataTransfer?.types.includes('Files')) {
      setIsDragOver(true);
    }
  };

  const handleDragLeave = (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª —ç–ª–µ–º–µ–Ω—Ç
    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();
    const x = e.clientX;
    const y = e.clientY;

    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
      setIsDragOver(false);
    }
  };

  const handleDrop = async (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);

    if (props.disabled) return;

    const files = e.dataTransfer?.files;
    if (!files || files.length === 0) return;

    await processFiles(files);
  };

  const getCardClass = () => {
    const baseClass = 'add-icon-card';
    const classes = [baseClass];

    if (isDragOver()) classes.push('drag-over');
    if (isProcessing()) classes.push('processing');
    if (props.disabled) classes.push('disabled');
    if (error()) classes.push('error');

    return classes.join(' ');
  };

  return (
    <div
      class={getCardClass()}
      onClick={handleFileSelect}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
    >
      <input
        ref={fileInputRef}
        type="file"
        multiple
        accept=".svg,image/svg+xml"
        style="display: none"
        onChange={handleFileChange}
      />

      <div class="add-icon-content">
        <Show
          when={!isProcessing()}
          fallback={
            <div class="processing-state">
              <div class="loading-spinner"></div>
              <div class="processing-text">–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...</div>
            </div>
          }
        >
          <Show
            when={!error()}
            fallback={
              <div class="error-state">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-text">{error()}</div>
                <button
                  class="retry-button"
                  onClick={(e) => {
                    e.stopPropagation();
                    setError(null);
                  }}
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </div>
            }
          >
            <Show
              when={!isDragOver()}
              fallback={
                <div class="drag-state">
                  <div class="drag-icon">üì•</div>
                  <div class="drag-text">
                    –û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è<br/>
                    <small>SVG —Ñ–∞–π–ª–æ–≤</small>
                  </div>
                </div>
              }
            >
              <div class="default-state">
                <div class="add-icon">+</div>
                <div class="add-text">
                  –î–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏<br/>
                  <small>SVG —Ñ–∞–π–ª—ã</small>
                </div>
              </div>
            </Show>
          </Show>
        </Show>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é */}
      <Show when={!isDragOver() && !isProcessing() && !error()}>
        <div class="add-icon-instructions">
          <div class="instruction-item">
            <span class="instruction-icon">üñ±Ô∏è</span>
            –ö–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
          </div>
          <div class="instruction-item">
            <span class="instruction-icon">üóÇÔ∏è</span>
            Drag & Drop
          </div>
        </div>
      </Show>
    </div>
  );
}