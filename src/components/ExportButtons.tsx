import { createEffect, createSignal, Show } from 'solid-js';
import { Portal } from 'solid-js/web';
import { exportService } from '../services/export.service';
import { IconData } from '../services/icons.service';

interface ExportButtonsProps {
  icons: Record<string, IconData>;
  projectName: string;
  disabled?: boolean;
}

export default function ExportButtons(props: ExportButtonsProps) {
  const [isExporting, setIsExporting] = createSignal(false);
  const [showFontDialog, setShowFontDialog] = createSignal(false);

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ PascalCase
  const normalizeProjectName = (name: string): string => {
    return name
      .replace(/[^a-zA-Z0-9\s-_]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
      .replace(/[\s-_]+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
      .split(' ')
      .filter(word => word.length > 0)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join('');
  };

  const [fontOptions, setFontOptions] = createSignal({
    familyName: normalizeProjectName(props.projectName) || 'MyIconFont',
    version: '1.0.0',
    description: `–ò–∫–æ–Ω–æ—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${props.projectName}`,
    startUnicode: 0xE000 // Private Use Area
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  createEffect(() => {
    const normalized = normalizeProjectName(props.projectName);
    if (normalized) {
      setFontOptions(prev => ({
        ...prev,
        familyName: normalized,
        description: `–ò–∫–æ–Ω–æ—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø—Ä–æ–µ–∫—Ç–∞ ${props.projectName}`
      }));
    }
  });

  const hasIcons = () => Object.keys(props.icons).length > 0;

  const handleSvgExport = async () => {
    if (!hasIcons() || props.disabled) return;

    try {
      setIsExporting(true);
      const data = await exportService.exportSvgArchive(props.icons);
      exportService.downloadFile(data, `${props.projectName}-icons.zip`, 'application/zip');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ SVG:', error);
      alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + (error instanceof Error ? error.message : 'Unknown error'));
    } finally {
      setIsExporting(false);
    }
  };

  const handleFontExport = async () => {
    if (!hasIcons() || props.disabled) return;
    setShowFontDialog(true);
  };

  const handleFontGenerate = async () => {
    const options = fontOptions();

    if (!options.familyName.trim()) {
      alert('–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–∞');
      return;
    }

    try {
      setIsExporting(true);
      setShowFontDialog(false);

      const data = await exportService.generateFontPackage(props.icons, options);
      exportService.downloadFile(data, `${options.familyName}-font.zip`, 'application/zip');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞: ' + (error instanceof Error ? error.message : 'Unknown error'));
    } finally {
      setIsExporting(false);
    }
  };

  const getIconCount = () => Object.keys(props.icons).length;

  return (
    <div class="export-buttons">
      <div class="export-header">
        <h3>–≠–∫—Å–ø–æ—Ä—Ç</h3>
        <Show when={hasIcons()}>
          <span class="export-count">{getIconCount()} –∏–∫–æ–Ω–æ–∫</span>
        </Show>
      </div>

      <div class="export-actions">
        {/* SVG Archive Export */}
        <button
          class="btn btn-secondary export-btn"
          onClick={handleSvgExport}
          disabled={!hasIcons() || props.disabled || isExporting()}
          title={!hasIcons() ? '–ù–µ—Ç –∏–∫–æ–Ω–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' : '–°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ —Å SVG –∏–∫–æ–Ω–∫–∞–º–∏'}
        >
          <span class="btn-icon">üì¶</span>
          <div class="btn-content">
            <span class="btn-title">SVG –∞—Ä—Ö–∏–≤</span>
            <small class="btn-description">ZIP —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º</small>
          </div>
        </button>

        {/* Font Export */}
        <button
          class="btn btn-primary export-btn"
          onClick={handleFontExport}
          disabled={!hasIcons() || props.disabled || isExporting()}
          title={!hasIcons() ? '–ù–µ—Ç –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞' : '–°–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–æ—á–Ω—ã–π —à—Ä–∏—Ñ—Ç'}
        >
          <span class="btn-icon">üî§</span>
          <div class="btn-content">
            <span class="btn-title">–ò–∫–æ–Ω–æ—á–Ω—ã–π —à—Ä–∏—Ñ—Ç</span>
            <small class="btn-description">TTF, WOFF, WOFF2 + CSS</small>
          </div>
        </button>
      </div>

      <Show when={isExporting()}>
        <div class="export-loading">
          <div class="loading-spinner"></div>
          <span>–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...</span>
        </div>
      </Show>

      {/* Font Options Bottom Sheet */}
      <Show when={showFontDialog()}>
        <Portal>
          <div class="bottom-sheet-overlay" onClick={() => setShowFontDialog(false)}>
            <div class="bottom-sheet" onClick={(e) => e.stopPropagation()}>
              {/* Handle bar */}
              <div class="bottom-sheet-handle"></div>

              <div class="bottom-sheet-header">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞</h3>
                <button
                  class="bottom-sheet-close"
                  onClick={() => setShowFontDialog(false)}
                  title="–ó–∞–∫—Ä—ã—Ç—å"
                >
                  √ó
                </button>
              </div>

              <div class="bottom-sheet-content">
                <div class="form-group">
                  <label for="font-family">–ò–º—è —Å–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–∞:</label>
                  <input
                    id="font-family"
                    type="text"
                    class="form-input"
                    value={fontOptions().familyName}
                    placeholder="MyIconFont"
                    onInput={(e) => setFontOptions(prev => ({
                      ...prev,
                      familyName: e.currentTarget.value
                    }))}
                  />
                  <small class="form-hint">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã</small>
                </div>

                <div class="form-row">
                  <div class="form-group form-group-half">
                    <label for="font-version">–í–µ—Ä—Å–∏—è:</label>
                    <input
                      id="font-version"
                      type="text"
                      class="form-input"
                      value={fontOptions().version}
                      placeholder="1.0.0"
                      onInput={(e) => setFontOptions(prev => ({
                        ...prev,
                        version: e.currentTarget.value
                      }))}
                    />
                  </div>

                  <div class="form-group form-group-half">
                    <label for="start-unicode">–ù–∞—á–∞–ª—å–Ω—ã–π Unicode (hex):</label>
                    <input
                      id="start-unicode"
                      type="text"
                      class="form-input"
                      value={fontOptions().startUnicode.toString(16).toUpperCase()}
                      placeholder="E000"
                      onInput={(e) => {
                        const hex = e.currentTarget.value.replace(/[^0-9A-Fa-f]/g, '');
                        const unicode = parseInt(hex, 16) || 0xE000;
                        setFontOptions(prev => ({ ...prev, startUnicode: unicode }));
                      }}
                    />
                    <small class="form-hint">
                      –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è E000-F8FF (Private Use Area).<br/>
                      –¢–µ–∫—É—â–∏–π: U+{fontOptions().startUnicode.toString(16).toUpperCase()}
                    </small>
                  </div>
                </div>

                <div class="form-group">
                  <label for="font-description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                  <textarea
                    id="font-description"
                    class="form-input"
                    rows="3"
                    value={fontOptions().description}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∫–æ–Ω–æ—á–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞"
                    onInput={(e) => setFontOptions(prev => ({
                      ...prev,
                      description: e.currentTarget.value
                    }))}
                  />
                </div>

                <div class="font-preview">
                  <div class="preview-info">
                    <strong>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</strong>
                  </div>
                  <div class="preview-details">
                    <div class="preview-item">
                      <span class="preview-label">–°–µ–º–µ–π—Å—Ç–≤–æ:</span>
                      <code>{fontOptions().familyName || 'MyIconFont'}</code>
                    </div>
                    <div class="preview-item">
                      <span class="preview-label">–ò–∫–æ–Ω–æ–∫:</span>
                      <span>{getIconCount()}</span>
                    </div>
                    <div class="preview-item">
                      <span class="preview-label">Unicode –¥–∏–∞–ø–∞–∑–æ–Ω:</span>
                      <code>
                        U+{fontOptions().startUnicode.toString(16).toUpperCase()} -
                        U+{(fontOptions().startUnicode + getIconCount() - 1).toString(16).toUpperCase()}
                      </code>
                    </div>
                  </div>
                </div>
              </div>

              <div class="bottom-sheet-actions">
                <button
                  class="btn btn-secondary"
                  onClick={() => setShowFontDialog(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  class="btn btn-primary"
                  onClick={handleFontGenerate}
                  disabled={!fontOptions().familyName.trim()}
                >
                  <span class="btn-icon">üî§</span>
                  –°–æ–∑–¥–∞—Ç—å —à—Ä–∏—Ñ—Ç
                </button>
              </div>
            </div>
          </div>
        </Portal>
      </Show>
    </div>
  );
}