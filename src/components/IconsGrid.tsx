import { For, Show } from 'solid-js';
import { IconData } from '../services/icons.service';
import AddIconCard from './AddIconCard';
import IconCard from './IconCard';

interface IconsGridProps {
  icons: Record<string, IconData>;
  onIconsAdd: (icons: IconData[]) => void;
  onIconRename: (oldName: string, newName: string) => void;
  onIconDelete: (name: string) => void;
  onIconTagsChange: (name: string, tags: string[]) => void;
  disabled?: boolean;
}

export default function IconsGrid(props: IconsGridProps) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –∏–∫–æ–Ω–æ–∫ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const iconsList = () => Object.values(props.icons);

  return (
    <div class="icons-grid-container">
      <div class="icons-grid">
        {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∫–æ–Ω–∫–∏ */}
        <For each={iconsList()}>
          {(icon) => (
            <div class="grid-item">
              <IconCard
                icon={icon}
                onRename={props.onIconRename}
                onDelete={props.onIconDelete}
                onTagsChange={props.onIconTagsChange}
              />
            </div>
          )}
        </For>

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è */}
        <div class="grid-item add-item">
          <AddIconCard
            onIconsAdd={props.onIconsAdd}
            disabled={props.disabled}
          />
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
      <Show when={iconsList().length > 0}>
        <div class="grid-info">
          <div class="info-item">
            <span class="info-label">–ò–∫–æ–Ω–æ–∫:</span>
            <span class="info-value">{iconsList().length}</span>
          </div>
          <div class="info-item">
            <span class="info-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</span>
            <span class="info-value">
              {(() => {
                const totalSize = iconsList().reduce((sum, icon) => sum + icon.size, 0);
                if (totalSize < 1024) return `${totalSize} –ë`;
                if (totalSize < 1024 * 1024) return `${(totalSize / 1024).toFixed(1)} –ö–ë`;
                return `${(totalSize / (1024 * 1024)).toFixed(1)} –ú–ë`;
              })()}
            </span>
          </div>
          <div class="info-item">
            <span class="info-label">–¢–µ–≥–æ–≤:</span>
            <span class="info-value">
              {(() => {
                const allTags = new Set();
                iconsList().forEach(icon => {
                  icon.tags.forEach(tag => allTags.add(tag));
                });
                return allTags.size;
              })()}
            </span>
          </div>
        </div>
      </Show>

      {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      <Show when={iconsList().length === 0}>
        <div class="empty-state">
          <div class="empty-icon">üé®</div>
          <h3 class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –∏–∫–æ–Ω–æ–∫</h3>
          <p class="empty-description">
            –î–æ–±–∞–≤—å—Ç–µ SVG —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–æ—á–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
          </p>
          <div class="empty-features">
            <div class="feature">
              <span class="feature-icon">üìÅ</span>
              <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞</span>
            </div>
            <div class="feature">
              <span class="feature-icon">üñ±Ô∏è</span>
              <span>Drag & Drop –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞</span>
            </div>
            <div class="feature">
              <span class="feature-icon">‚úèÔ∏è</span>
              <span>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏</span>
            </div>
            <div class="feature">
              <span class="feature-icon">üíæ</span>
              <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ</span>
            </div>
          </div>
        </div>
      </Show>
    </div>
  );
}